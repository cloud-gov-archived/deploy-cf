---
jobs:

- name: terraform-plan
  plan:
  - in_parallel:
    - get: cg-deploy-cf
      trigger: true
    - get: cg-provision-repo
      trigger: true
  - task: terraform-plan
    tags: [iaas]
    file: cg-provision-repo/concourse/tasks/terraform.yml
    input_mapping: {terraform-templates: cg-deploy-cf}
    params: &tf-params
      AWS_ACCESS_KEY_ID: ((aws.access_key_id))
      AWS_REGION: ((aws.region)) 
      AWS_SECRET_ACCESS_KEY: ((aws.secret_access_key))
      COMPONENT: cloudfoundry
      S3_TFSTATE_BUCKET: ((buckets.terraform_state))
      STACK_NAME: cloudfoundry
      TEMPLATE_SUBDIR: terraform/stack/cloudfoundry
      TERRAFORM_ACTION: plan
      TF_VAR_bosh_default_ssh_public_key: ((bosh_default_ssh_public_key))
      TF_VAR_environment: ((environment))
      TF_VAR_rds_db_name: ((cf.db.name))
      TF_VAR_rds_password: ((cf.db.password))
      TF_VAR_rds_private_cidrs: ((rds_private_cidrs))
      TF_VAR_rds_username: ((cf.db.username))
      TF_VAR_stack_description: ((environment))-cf
    vars: &general-task-vars
      access_key_id: ((hack.access_key_id))
      region: ((hack.region))
      secret_access_key: ((hack.secret_access_key))

- name: terraform-apply
  plan:
  - in_parallel:
    - get: cg-deploy-cf
      passed: [terraform-plan]
    - get: cg-provision-repo
    - get: pipeline-tasks
  - task: terraform-apply
    tags: [iaas]
    file: cg-provision-repo/concourse/tasks/terraform.yml
    input_mapping: {terraform-templates: cg-deploy-cf}
    params: 
      <<: *tf-params
      TERRAFORM_ACTION: apply
    vars: 
      <<: *general-task-vars
  - get: terraform-state
    tags: [iaas]
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params: 
      STATE_FILE: terraform.tfstate
    vars: 
      <<: *general-task-vars
  - put: terraform-state-yaml
    params:
      file: terraform-yaml/state.yml

- name: cloud-config
  serial: true
  plan:
  # - in_parallel: 
  - get: cg-deploy-cf
  - put: bosh-cloud-config
    params:
      manifest: cg-deploy-cf/bosh/config/cloudfoundry.yml
      vars_files:
        - terraform-secrets/terraform.yml
        - environment-config/envs/((environment))/cloudfoundry.yml

- name: deploy
  serial: true
  plan:
  - in_parallel:
    - get: cg-deploy-cf
      #passed: [terraform-apply]
    - get: cf-deployment
      # trigger: true
    - get: terraform-yaml
      resource: terraform-state-yaml
      passed: [terraform-apply]
    - get: cf-stemcell-jammy
      # trigger: true
    - get: uaa-customized-release
      # trigger: true
    - get: cg-s3-secureproxy-release
      # trigger: true
    - get: environment-config
      # trigger: true
  - task: terraform-secrets
    file: cg-deploy-cf/concourse/terraform-secrets.yml
    vars: 
      <<: *general-task-vars
  - task: router-main
    file: cg-deploy-cf/ci/create-router-main.yml
    vars: 
      <<: *general-task-vars
  - put: bosh-deploy
    params: &deploy-params
      dry_run: true
      manifest: cf-deployment/cf-deployment.yml
      releases:
      - uaa-customized-release/*.tgz
      - cg-s3-secureproxy-release/*.tgz
      stemcells:
      - cf-stemcell-jammy/*.tgz
      ops_files:
      - router-main/router_main.yml
      - cf-deployment/operations/rename-network-and-deployment.yml
      - cg-deploy-cf/bosh/opsfiles/use-s3-blobstore.yml
      - cf-deployment/operations/use-external-dbs.yml
      - cf-deployment/operations/stop-skipping-tls-validation.yml
      - cf-deployment/operations/set-bbs-active-key.yml
      - cf-deployment/operations/enable-service-discovery.yml
      - cg-deploy-cf/bosh/opsfiles/remove-routing-components-for-transition.yml
      - cg-deploy-cf/bosh/opsfiles/clients.yml
      # - cg-deploy-cf/bosh/opsfiles/development-clients.yml
      # - cg-deploy-cf/bosh/opsfiles/pages-clients-dev.yml
      - cg-deploy-cf/bosh/opsfiles/users.yml
      - cg-deploy-cf/bosh/opsfiles/secureproxy.yml
      - cg-deploy-cf/bosh/opsfiles/apps-domain.yml
      - cg-deploy-cf/bosh/opsfiles/api-defaults.yml
      - cg-deploy-cf/bosh/opsfiles/uaa-customized.yml
      - cg-deploy-cf/bosh/opsfiles/uaa-branding.yml
      - cg-deploy-cf/bosh/opsfiles/uaa-groups.yml
      - cg-deploy-cf/bosh/opsfiles/uaa-login.yml
      - cg-deploy-cf/bosh/opsfiles/uaa-saml.yml
      - cg-deploy-cf/bosh/opsfiles/uaa-user.yml
      - cg-deploy-cf/bosh/opsfiles/uaa-cors.yml
      - cg-deploy-cf/bosh/opsfiles/encryption.yml
      - cg-deploy-cf/bosh/opsfiles/sql.yml
      - cg-deploy-cf/bosh/opsfiles/log-levels.yml
      - cg-deploy-cf/bosh/opsfiles/instance-profiles.yml
      - cg-deploy-cf/bosh/opsfiles/platform-cells.yml
      - cg-deploy-cf/bosh/opsfiles/diego-cell-disk.yml
      - cg-deploy-cf/bosh/opsfiles/diego-dns.yml
      - cg-deploy-cf/bosh/opsfiles/scaling.yml
      - cg-deploy-cf/bosh/opsfiles/cf-networking.yml
      - cg-deploy-cf/bosh/opsfiles/enable-cflinuxfs4.yml
      - cg-deploy-cf/bosh/opsfiles/disable-secure-service-credentials.yml
      - cg-deploy-cf/bosh/opsfiles/diego-rds-certs.yml
      - cg-deploy-cf/bosh/opsfiles/smoke-tests.yml
      - cg-deploy-cf/bosh/opsfiles/routing.yml
      - cg-deploy-cf/bosh/opsfiles/uaa-rds-ca.yml
      - cg-deploy-cf/bosh/opsfiles/content-security-policy.yml
      - cg-deploy-cf/bosh/opsfiles/loggregator.yml
      - cg-deploy-cf/bosh/opsfiles/meta-data-v2.yml
      - cg-deploy-cf/bosh/opsfiles/router-main.yml
      - cg-deploy-cf/bosh/opsfiles/router-main-dev.yml
      # - cg-deploy-cf/bosh/opsfiles/router-logstash.yml
      # - cg-deploy-cf/bosh/opsfiles/router-logstash-dev.yml
      # - cg-deploy-cf/bosh/opsfiles/add-autoscaler-ca.yml
      # - cg-deploy-cf/bosh/opsfiles/add-bosh-dns-other-deployments.yml
      # - cg-deploy-cf/bosh/opsfiles/add-opensearch-ca.yml
      - cg-deploy-cf/bosh/opsfiles/diego-cpu-entitlement.yml
      # - cg-deploy-cf/bosh/opsfiles/aggregate_drains.yml
      vars:
        deployment_name: ((environment))-cloudfoundry
      vars_files:
      - terraform-secrets/terraform.yml
      - environment-config/envs/((environment))/cloudfoundry.yml

#   # - task: enable-cf-features
#   #   file: cg-deploy-cf/ci/enable-cf-features.yml
#   #   params:
#   #     CF_API_URL: ((cf-api-url-development))
#   #     CF_USERNAME: ((cf-username-development))
#   #     CF_PASSWORD: ((cf-password-development))
#   #     ENABLED_FEATURE_FLAGS: |
#   #       private_domain_creation
#   #       app_bits_upload
#   #       app_scaling
#   #       route_creation
#   #       service_instance_creation
#   #       diego_docker
#   #       set_roles_by_username
#   #       unset_roles_by_username
#   #       task_creation
#   #       env_var_visibility
#   #       space_scoped_private_broker_creation
#   #       space_developer_env_var_visibility
#   #       service_instance_sharing
#   #       resource_matching
#   #       route_sharing
#   #     DISABLED_FEATURE_FLAGS: |
#   #       user_org_creation
#   #       hide_marketplace_from_unauthenticated_users



resources:

- name: bosh-deploy
  type: bosh-deployment
  source:
    target: ((bosh_director.target))
    client: ((bosh_director.client_id))
    client_secret: ((bosh_director.client_secret))
    ca_cert: ((bosh_director.ca_cert))
    deployment: ((environment))-cloudfoundry

- name: bosh-cloud-config
  type: bosh-config
  source:
    target: ((bosh_director.target))
    client: ((bosh_director.client_id))
    client_secret: ((bosh_director.client_secret))
    ca_cert: ((bosh_director.ca_cert))
    config: cloud
    name: cloudfoundry

- name: cg-deploy-cf
  type: git
  source:
    commit_verification_keys: ((commit_verification_keys))
    uri: https://github.com/cloud-gov/cg-deploy-cf.git
    branch: f140
    paths:
    - bosh/*
    - ci/*
    - concourse/*
    - terraform/*

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: main
    tag_filter: "v*"

- name: pipeline-tasks
  type: git
  source:
    commit_verification_keys: ((commit_verification_keys))
    uri: https://github.com/cloud-gov/cg-pipeline-tasks.git
    branch: f140
    # can't use paths b/c the last commit is not signed (too old)
    # paths:
    # - terraform-state-to-yaml.*

- name: cg-provision-repo
  type: git
  source:
    commit_verification_keys: ((commit_verification_keys))
    uri: https://github.com/cloud-gov/cg-provision.git
    branch: f140
    paths:
    - terraform/*

- name: environment-config
  type: git
  source:
    commit_verification_keys: ((commit_verification_keys))
    # TODO temporary repo to hold configs
    uri: git@github.com:cloud-gov/westa-env.git
    branch: f140
    paths:
    - envs/((environment))/cloudfoundry.yml
    private_key: ((cg_ci_bot_ssh_pk))

- name: terraform-state
  type: s3-iam
  source:
    bucket: ((buckets.terraform_state))
    versioned_file: cloudfoundry/terraform.tfstate
    region_name: ((aws.region))
    server_side_encryption: AES256

- name: terraform-state-yaml
  type: s3-iam
  source:
    bucket: ((buckets.terraform_state))
    versioned_file: cloudfoundry/state.yml
    region_name: ((aws.region))
    server_side_encryption: AES256

- name: cf-stemcell-jammy
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-jammy-go_agent

- name: uaa-customized-release
  type: s3-iam
  source:
    bucket: ((buckets.bosh_releases))
    private: true
    regexp: uaa-customized-(.*).tgz
    region_name: ((aws.region))

- name: cg-s3-secureproxy-release
  type: s3-iam
  source:
    bucket: ((buckets.bosh_releases))
    private: true
    regexp: secureproxy-(.*).tgz
    region_name: ((aws.region))





resource_types:

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: git
  type: registry-image
  source:
    aws_access_key_id: ((hack.access_key_id))
    aws_secret_access_key: ((hack.secret_access_key))
    repository: git-resource
    aws_region: ((aws.region))
    tag: latest

# - name: registry-image
#   type: registry-image
#   source:
#     aws_access_key_id: ((hack.access_key_id))
#     aws_secret_access_key: ((hack.secret_access_key))
#     repository: registry-image-resource
#     aws_region: ((hack.region))
#     tag: latest

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: bosh-config
  type: registry-image
  source:
    repository: cfcommunity/bosh-config-resource
