---
jobs:

- name: terraform-plan
  plan:
  - in_parallel:
    - get: cg-deploy-cf
      trigger: true
    - get: cg-provision-repo
      trigger: true
  - task: terraform-plan
    tags: [iaas]
    file: cg-provision-repo/concourse/tasks/terraform.yml
    input_mapping: {terraform-templates: cg-deploy-cf}
    params: 
      AWS_ACCESS_KEY_ID: ((aws.access_key_id))
      AWS_REGION: ((aws.region)) 
      AWS_SECRET_ACCESS_KEY: ((aws.secret_access_key))
      COMPONENT: cloudfoundry
      S3_TFSTATE_BUCKET: ((buckets.terraform_state))
      TEMPLATE_SUBDIR: terraform/stack/cloudfoundry
      TERRAFORM_ACTION: plan
      TF_VAR_bosh_default_ssh_public_key: ((bosh_default_ssh_public_key))
      TF_VAR_environment: ((environment))
      TF_VAR_stack_description: ((environment))-cf
    vars: 
      access_key_id: ((hack.access_key_id))
      region: ((hack.region))
      secret_access_key: ((hack.secret_access_key))

- name: terraform-apply
  plan:
  - in_parallel:
    - get: cg-deploy-cf
      trigger: true
      passed: [terraform-plan]
    - get: cg-provision-repo
      trigger: true
  - task: terraform-apply
    tags: [iaas]
    file: cg-provision-repo/concourse/tasks/terraform.yml
    input_mapping: {terraform-templates: cg-deploy-cf}
    params: 
      AWS_ACCESS_KEY_ID: ((aws.access_key_id))
      AWS_REGION: ((aws.region)) 
      AWS_SECRET_ACCESS_KEY: ((aws.secret_access_key))
      COMPONENT: cloudfoundry
      S3_TFSTATE_BUCKET: ((buckets.terraform_state))
      TEMPLATE_SUBDIR: terraform/stack/cloudfoundry
      TERRAFORM_ACTION: apply
      TF_VAR_bosh_default_ssh_public_key: ((bosh_default_ssh_public_key))
      TF_VAR_environment: ((environment))
      TF_VAR_stack_description: ((environment))-cf
    vars: 
      access_key_id: ((hack.access_key_id))
      region: ((hack.region))
      secret_access_key: ((hack.secret_access_key))
    vars: 
      access_key_id: ((hack.access_key_id))
      region: ((hack.region))
      secret_access_key: ((hack.secret_access_key))

resources:

- name: cg-deploy-cf
  type: git
  source:
    commit_verification_keys: ((commit_verification_keys))
    uri: https://github.com/cloud-gov/cg-deploy-cf.git
    branch: f140
    paths:
    - bosh/*
    - ci/*
    - concourse/*
    - terraform/*

- name: cg-provision-repo
  type: git
  source:
    commit_verification_keys: ((commit_verification_keys))
    uri: https://github.com/cloud-gov/cg-provision.git
    branch: f140
    paths:
    - concourse/tasks/*

# - name: terraform-yaml
#   type: s3-iam
#   source:
#     bucket: ((buckets.terraform_state))
#     versioned_file: ((buckets.terraform_state_file))
#     region_name: ((aws.region))

# - name: cf-stemcell-jammy
#   type: bosh-io-stemcell
#   source:
#     name: bosh-aws-xen-hvm-ubuntu-jammy-go_agent

# - name: uaa-customized-release
#   type: s3-iam
#   source:
#     bucket: ((buckets.bosh_releases))
#     private: true
#     regexp: uaa-customized-(.*).tgz
#     region_name: ((aws.region))

# - name: cg-s3-secureproxy-release
#   type: s3-iam
#   source:
#     bucket: ((buckets.bosh_releases))
#     private: true
#     regexp: secureproxy-(.*).tgz
#     region_name: ((aws.region))

# - name: bosh-deploy
#   type: bosh-deployment
#   source:
#     target: ((bosh_director.target))
#     client: ((bosh_director.client_id))
#     client_secret: ((bosh_director.client_secret))
#     ca_cert: ((bosh_director.ca_cert))
#     deployment: cf

# - name: general-task
#   type: registry-image
#   source:
#     aws_access_key_id: ((hack.access_key_id))
#     aws_secret_access_key: ((hack.secret_access_key))
#     repository: general-task
#     aws_region: ((hack.region))
#     tag: latest

resource_types:

# - name: bosh-deployment
#   type: docker-image
#   source:
#     repository: cloudfoundry/bosh-deployment-resource

- name: git
  type: registry-image
  source:
    aws_access_key_id: ((hack.access_key_id))
    aws_secret_access_key: ((hack.secret_access_key))
    repository: git-resource
    aws_region: ((aws.region))
    tag: latest

# - name: registry-image
#   type: registry-image
#   source:
#     aws_access_key_id: ((hack.access_key_id))
#     aws_secret_access_key: ((hack.secret_access_key))
#     repository: registry-image-resource
#     aws_region: ((hack.region))
#     tag: latest

# - name: s3-iam
#   type: docker-image
#   source:
#     repository: 18fgsa/s3-resource
